'use strict';

const yargs = require('yargs').argv;
const { log4js } = require('./utils/log4js');
const logger = log4js.getLogger('bot');
const { startLoop, findHome } = require('./models/homes');
const { createUser, changeState, setCity, getCityById } = require('./models/users');
const { Telegraf, Markup } = require('telegraf');
const configs = require('./configs/bot');
const bot = new Telegraf(yargs.token);
const EventObserver = require('./services/observer');
const observer = new EventObserver(broadcast);

startLoop(observer);

bot.start(async ctx => {
    const user = ctx.message.from;
    logger.info(`User [${user.id}] started bot`);
    await createUser(user.id, user.username);
    if (user.is_bot) {
        await changeState(user.id, 'BOT');
        return bot.stop('SIGINT');
    }
    return ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–∞—Å–µ–ª–µ–Ω–Ω—ã–π –ø—É–Ω–∫—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞');
});

bot.on('message', async ctx => {
    const id = ctx.message.from.id;
    const city = ctx.message.text;
    if (!/[^\.~`!#$%\^&*‚Ññ+=\-\[\]\\';,/{}|\\":<>\?a-zA-Z0-9]/.test(city)) {
        return ctx.reply(`–ù–µ –≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –≥–æ—Ä–æ–¥. –ü—Ä–∏–º–µ—Ä: –ú–∏–Ω—Å–∫`);
    }
    logger.info(`User [${id}] added city name ${city}`);
    await changeState(id, 'RUN');
    observer.unsubscribe(id);
    await setCity(id, city);
    const message = await findHome(city);
    if (message === '') {
        await ctx.reply(`–ù–µ—Ç –∫–≤–∞—Ä—Ç–∏—Ä –≤ –≥.${city}`);
        return ctx.reply('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?',
            Markup.inlineKeyboard([
                Markup.button.callback('üîî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 'Follow')
        ]));
    } else {
    await ctx.reply(message);
    return ctx.reply('–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ?',
        Markup.inlineKeyboard([
            Markup.button.callback('üîî–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', 'Subscribe')
        ]));
    }
});

bot.action('Subscribe', async ctx => {
    const id = ctx.update.callback_query.from.id;
    await changeState(id, 'SUBSCRIBED');
    observer.subscribe(id);
    return ctx.reply('–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å',
    Markup.inlineKeyboard([
        Markup.button.callback('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'Unsubscribe')
    ]));
});

bot.action('Unsubscribe', async ctx => {
    const id = ctx.update.callback_query.from.id;
    observer.unsubscribe(id);
    await changeState(id, 'RUN');
    await ctx.reply('–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å');
});

bot.launch(configs);

async function broadcast(id) {
    const city = await getCityById(id);
    const message = await findHome(city);
        if (message !== '') {
            logger.info(`BROADCAST is working for ${id}`);
            return bot.telegram.sendMessage(id,'‚ö°–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–≤–∞—Ä—Ç–∏—Ä –ø–æ –ø–æ–¥–ø–∏—Å–∫–µ‚ö°\n' + message,
            Markup.inlineKeyboard([
            Markup.button.callback('–û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'Unsubscribe')
            ]));
        }
}